{"version":3,"sources":["mainRoutes.ts","ui/components/Layout/Layout.tsx","ui/pages/Home/Home.tsx","ui/pages/Post/pages/CreatePost/CreatePost.tsx","ui/pages/Post/Post.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","Global/rootReducer.ts","Global/Store.ts","index.tsx"],"names":["mainRoutes","home","post","createPost","Layout","children","Grid","container","item","xs","Home","CreatePost","React","useState","title","tags","category","content","form","setForm","handleChange","e","prev","target","name","value","Box","component","TextField","label","onChange","Button","onClick","console","log","Post","path","element","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","reducer","devTools","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.622c038b.chunk.js","sourcesContent":["const mainRoutes = {\r\n  home: '/findme',\r\n  post: '/findme/post',\r\n  createPost: '/findme/post/create',\r\n}\r\n\r\nexport default mainRoutes;","import React from 'react';\r\nimport { Grid } from '@mui/material';\r\n\r\ninterface iProps {\r\n}\r\n\r\nconst Layout:React.FC<iProps> = ({ children }): JSX.Element => {\r\n    return (\r\n        <Grid  container>\r\n          <Grid item xs={12}>Navbar</Grid>\r\n          <Grid item xs={10}>\r\n            {children}\r\n          </Grid>\r\n          <Grid item xs={2}>Sidebar</Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\n\r\ninterface iProps {\r\n}\r\n\r\nconst Home:React.FC<iProps> = (): JSX.Element => {\r\n    return (\r\n        <div>\r\n            our home page\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import { Button, TextField } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React from 'react';\r\n\r\ninterface iProps {\r\n}\r\n\r\nconst CreatePost:React.FC<iProps> = (): JSX.Element => {\r\n    const [form, setForm] = React.useState({ title: '', tags: '', category: '', content: '' });\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setForm((prev) => ({ ...prev, [e.target.name]: e.target.value }));\r\n    }\r\n\r\n    const handleSave = (): void => {\r\n        console.log(form);\r\n    }\r\n\r\n    return (\r\n        <Box component=\"div\">\r\n            <TextField \r\n                label=\"Title\"\r\n                onChange={handleChange}\r\n            />\r\n            <TextField \r\n                label=\"Tags\"\r\n                onChange={handleChange}\r\n            />\r\n            <TextField \r\n                label=\"Category\"\r\n                onChange={handleChange}\r\n            />\r\n            <TextField \r\n                label=\"Content\"\r\n                onChange={handleChange}\r\n            />\r\n            <Button onClick={handleSave}>Save</Button>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default CreatePost;","import React from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport mainRoutes from '../../../mainRoutes';\r\nimport { CreatePost } from './pages/CreatePost';\r\n\r\nconst Post:React.FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path={mainRoutes.createPost} element={<CreatePost />} />\r\n        </Routes>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\n\nimport mainRoutes from './mainRoutes';\nimport { Layout } from './ui/components/Layout';\n\nimport Home from './ui/pages/Home';\nimport Post from './ui/pages/Post';\n\nconst App:React.FC = () => {\n    return (\n      <Layout>\n        <Routes>\n          <Route element={<Home />} path={mainRoutes.home} />\n          <Route element={<Post />} path={mainRoutes.post} />\n        </Routes>\n      </Layout>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({});\r\n\r\n\r\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './rootReducer';\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    devTools: process.env.NODE_ENV !== \"development\" ? false : true\r\n});\r\n\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport store from './Global/Store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}