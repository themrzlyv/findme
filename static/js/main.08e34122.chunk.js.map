{"version":3,"sources":["ui/components/Layout/Layout.tsx","ui/pages/Post/common/redux/Post.Slice.ts","services/selectors/index.ts","ui/pages/Home/blocks/Posts.tsx","ui/pages/Home/partials/Body.tsx","ui/pages/Home/partials/Header.tsx","ui/pages/Home/Home.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","Global/rootReducer.ts","Global/Store.ts","Theme/theme.ts","ui/components/ErrorBoundary/ErrorBoundary.tsx","index.tsx","services/config/firebase.ts","ui/pages/Post/postRoutes.ts","mainRoutes.ts","services/api/api.posts.ts"],"names":["Layout","children","Grid","container","maxWidth","mx","spacing","item","xs","AppBar","position","color","Toolbar","Typography","variant","postSlice","createSlice","name","initialState","posts","reducers","getAllPosts","state","action","payload","actions","postSelector","createSelector","Posts","useSelector","console","log","Box","component","display","justifyContent","sx","width","map","post","Card","CardMedia","alt","height","image","CardContent","gutterBottom","title","content","substring","CardActions","Button","size","Body","dispatch","useDispatch","useEffect","fetchPosts","then","padding","Header","marginY","fontWeight","Home","Paper","elevation","flexDirection","Post","lazy","App","fallback","element","path","mainRoutes","home","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","PostSlice","store","configureStore","reducer","devTools","theme","createTheme","palette","primary","main","lightBlue","light","dark","components","MuiTextField","styleOverrides","root","ErrorBoundary","hasError","errorInfo","this","props","_","Component","ReactDOM","render","ThemeProvider","autoClose","transition","Slide","hideProgressBar","closeOnClick","pauseOnFocusLoss","pauseOnHover","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","fireStorage","storage","postRoutes","createPost","reqData","Promise","resolve","reject","collection","add","result","exists","err","docs","data"],"mappings":"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","file":"static/js/main.08e34122.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Grid, Toolbar, Typography } from '@mui/material';\r\n\r\ninterface iProps {};\r\n\r\nconst Layout: React.FC<iProps> = ({ children }): JSX.Element => {\r\n  return (\r\n    <Grid container maxWidth=\"lg\" mx=\"auto\" spacing={1}>\r\n      <Grid item xs={12}>\r\n        <AppBar position=\"static\" color=\"primary\">\r\n          <Toolbar>\r\n            <Typography variant=\"body2\">FindMe</Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Grid>\r\n      <Grid item xs={10}>\r\n        {children}\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        Sidebar\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { iPost, iPostState } from \"../@types\";\r\n\r\nconst initialState: iPostState = {\r\n  posts: []\r\n}\r\n\r\n\r\nconst postSlice = createSlice({\r\n  name: 'Post',\r\n  initialState,\r\n  reducers: {\r\n    getAllPosts: (state, action: PayloadAction<iPost[]>) => {\r\n      state.posts = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { getAllPosts } = postSlice.actions;\r\n\r\nexport default postSlice.reducer;\r\n\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../Global/Store\";\r\n\r\nconst getMainApp = (state: RootState) => state;\r\n\r\nexport const postSelector = createSelector(\r\n  getMainApp,\r\n  ({ posts }) => posts\r\n);","import { Button, Card, CardActions, CardContent, CardMedia, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { postSelector } from '../../../../services/selectors';\r\n\r\ninterface iProps {}\r\n\r\nconst Posts: React.FC<iProps> = (): JSX.Element => {\r\n  const { posts } = useSelector(postSelector);\r\n\r\n  console.log(posts);\r\n  return (\r\n    <Box component=\"div\" display=\"flex\" justifyContent=\"space-around\" sx={{ width: '100%' }}>\r\n      {posts.map((post) => (\r\n        <Card key={post.title} sx={{ width: '18em', maxWidth: '20em' }}>\r\n          <CardMedia component=\"img\" alt=\"green iguana\" height=\"140\" image={post.image} />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              {post.title}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              {post.content.substring(0, 75)}\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button size=\"small\">Share</Button>\r\n            <Button size=\"small\">Learn More</Button>\r\n          </CardActions>\r\n        </Card>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import { Box } from '@mui/system';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchPosts } from '../../../../services/api/api.posts';\r\nimport { getAllPosts } from '../../Post/common/redux/Post.Slice';\r\nimport Posts from '../blocks/Posts';\r\n\r\ninterface iProps {}\r\n\r\nconst Body: React.FC<iProps> = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n  // const t = useRef();\r\n\r\n  useEffect(() => {\r\n    fetchPosts().then((posts) => dispatch(getAllPosts(posts)));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Box component=\"div\" display=\"flex\" padding={2}>\r\n      <Posts />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import { Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React from 'react';\r\n\r\ninterface iProps {\r\n}\r\n\r\nconst Header:React.FC<iProps> = (): JSX.Element => {\r\n    return (\r\n        <Box component=\"div\" display=\"flex\" justifyContent=\"center\" marginY={3}>\r\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n              Search, find and share development skills\r\n          </Typography>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Header;","import { Paper, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React from 'react';\r\nimport Body from './partials/Body';\r\nimport Header from './partials/Header';\r\n\r\ninterface iProps {}\r\n\r\nconst Home: React.FC<iProps> = (): JSX.Element => {\r\n  return (\r\n    <Paper elevation={2}>\r\n      <Box component=\"div\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\">\r\n        <Header />\r\n        <Body />\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { lazy, Suspense } from 'react';\nimport { Routes, Route } from 'react-router-dom';\n\nimport mainRoutes from './mainRoutes';\nimport { Layout } from './ui/components/Layout';\n\nimport Home from './ui/pages/Home';\n\nconst Post = lazy(() => import('./ui/pages/Post'));\n\nconst App: React.FC = () => {\n  return (\n    <Layout>\n      <Suspense fallback={<h4>Guys iam downloading wait please</h4>}>\n        <Routes>\n          <Route element={<Home />} path={mainRoutes.home} />\n          <Route element={<Post />} path={mainRoutes.post} />\n        </Routes>\n      </Suspense>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\r\nimport PostSlice from \"../ui/pages/Post/common/redux/Post.Slice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: PostSlice,\r\n});\r\n\r\n\r\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './rootReducer';\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    devTools: process.env.NODE_ENV !== \"development\" ? false : true\r\n});\r\n\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;","import { createTheme } from '@mui/material/styles';\r\nimport { lightBlue } from '@mui/material/colors';\r\n\r\nexport const theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: lightBlue[800],\r\n      light: lightBlue[400],\r\n      dark: lightBlue[900],\r\n    }\r\n  },\r\n  components: {\r\n    MuiTextField: {\r\n      styleOverrides: {\r\n        root: {\r\n          width: '50%'\r\n        }\r\n      }\r\n    }\r\n  }\r\n});","import React, { Component, ErrorInfo, ReactNode } from \"react\";\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends Component<Props, State> {\r\n  public state: State = {\r\n    hasError: false\r\n  };\r\n\r\n  public static getDerivedStateFromError(_: Error): State {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    console.error(\"Uncaught error:\", error, errorInfo);\r\n  }\r\n\r\n  public render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Sorry.. there was an error</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@mui/material';\n\nimport { ToastContainer, Slide } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport store from './Global/Store';\nimport { theme } from './Theme/theme';\nimport ErrorBoundary from './ui/components/ErrorBoundary';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <ErrorBoundary>\n          <App />\n          <ToastContainer\n            theme=\"colored\"\n            position=\"bottom-right\"\n            autoClose={2000}\n            transition={Slide}\n            hideProgressBar\n            closeOnClick\n            pauseOnFocusLoss\n            pauseOnHover\n          />\n        </ErrorBoundary>\n      </ThemeProvider>\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/firestore';\r\nimport 'firebase/compat/storage'\r\nimport 'firebase/compat/auth';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAIMaPjRkt4OGl0YorPyBnFiMH446bUU5I\",\r\n  authDomain: \"findme-web-app.firebaseapp.com\",\r\n  projectId: \"findme-web-app\",\r\n  storageBucket: \"findme-web-app.appspot.com\",\r\n  messagingSenderId: \"873728734687\",\r\n  appId: \"1:873728734687:web:4e0cff13f3a17a7386406a\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const fireStorage = firebase.storage();\r\nexport default firebase;","const postRoutes = {\r\n  createPost: '/create',\r\n}\r\n\r\nexport default postRoutes;","import postRoutes from \"./ui/pages/Post/postRoutes\";\r\n\r\nconst mainRoutes = {\r\n  home: '/findme',\r\n  post: '/findme/post/*',\r\n\r\n  ...postRoutes,\r\n}\r\n\r\nexport default mainRoutes;","import { iCreatePost, iPost } from \"../../ui/pages/Post/common/@types\";\r\nimport { firestore } from \"../config/firebase\";\r\n\r\nexport const createPost = (reqData: iCreatePost) => {\r\n  return new Promise((resolve,reject) => {\r\n      firestore\r\n          .collection('posts')\r\n          .add(reqData)\r\n          .then((result) => result.get())\r\n          .then((post) => resolve(post.exists))\r\n          .catch(err => reject(err));\r\n  })\r\n}\r\n\r\nexport const fetchPosts = (): Promise<iPost[]> => {\r\n  return new Promise((resolve,reject) => {\r\n      firestore\r\n          .collection('posts')\r\n          .get()\r\n          .then((result) => result.docs)\r\n          .then((posts) => posts.map(post => post.data()))\r\n          .then((result) => resolve(result as iPost[]))\r\n          .catch(err => reject(err));\r\n  });\r\n}"],"sourceRoot":""}